<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Octopus App</string>
    <string name="title_activity_splash">SplashActivity</string>


    //-----------------نصوص ال view pager----------------//
    <string name="octopus_main_title">مرحبا بـك في تطبيق - Octopus -</string>
    <string name="pager_two">
        - هنا الصفحة الرئيسية والتي تحتوى على:
        \n\t- زر النافذة الجانبية في أعلى يسار الشاشة .
        \n\n\t- زر نسخ النتائج في أعلى يمين الشاشة .
        \n\n\t- شاشة العرض .
        \n\n\t- صف أزرار التحكم ويحتوي على: .
        \n\t\t- زر إختيار الشفرة .\t - يجب عليك إختيار شفرة أولا -
        \n\t\t- زر التبديل : \t يقوم بتبديل النص الظاهر على الشاشة مكان النص الموجود في حقل الإدخال .
        \n\t\t- زر الحذف : \t يقوم بحذف النصوص وإعادة ضبط الواجهة .
        \n\t\t- زر إظهار العملية : \t يقوم بعرض وشرح تفاصيل العملية .
        \n\n\t- مكان فارغ تظهر عليه حقول الإدخال .
        \n\n\t- أزرار التنفيذ .
    </string>

    <string name="pager_three">
- عند الضغط على زر الشفرة تظهر لك قائمة منسدلة تحتوي على الشفرات المتاحة .
    </string>
    <string name="pager_four">
- عند الضغط على زر النافذة الجانبية تظهر لك النافذة الجانبية ومنها يمكنك تغيير الـوضع, تغيير اللغة ,قراءة التعليمات أو معلومات التطبيق.
    </string>

//------------------------T2B------------------------------//

    <string name="t_pager_one">
        \t في هذه الخطوة نقوم بتحويل شفرة آسكي للعدد الثنائي المكافيء لها, وذلك عن طريق قسمة الرقم العشري \"شفرة آسكي\" على العدد 2 لنحصل على ناتج القسمة \nباقي القسمة يكون إما 0 أو 1,
        \nنحتفظ بباقي القسمة داخل مصفوفة ونقسم ناتج القسمة على 2 لنحصل على ناتج قسمة جديد وباقي قسمة جديد نحتفظ به ونقوم بقسمة ناتج القسمة على 2, نكرر هذه العملية حتى يصبح ناتج القسمة يساوي 0
    </string>
    <string name="t_pager_two">
        مثلا إذا كانت قيمة شفرة آسكي تساوي 85 وهي شفرة الحرف "U" فإننا نقوم بقسمة 85 على 2 لنحصل على 42 كناتج قسمة وباقي القسمة يساوي 1
        \nمصفوفة باقي القسمةالآن تحتوي [1]
    </string>
    <string name="t_pager_three">
        الآن نقوم بقسمة 42 على 2 لنحصل على 21 وباقي القسمة 0
        \nمصفوفة باقي القسمة [1,0]
    </string>
    <string name="t_pager_four">
        21 قسمة 2 تساوي 10 والباقي 1
        \nمصفوفة باقي القسمة [1,0,1]
    </string>
    <string name="t_pager_five">
        10 قسمة 2 تساوي 5 والباقي 0
        \nمصفوفة باقي القسمة [1,0,1,0]
    </string>
    <string name="t_pager_six">
        5 قسمة 2 تساوي 2 والباقي 1
        \nمصفوفة باقي القسمة [1,0,1,0,1]
    </string>
    <string name="t_pager_seven">
        2 قسمة 2 تساوي 1 والباقي 0
        \nمصفوفة باقي القسمة [1,0,1,0,1,0]
    </string>
    <string name="t_pager_eight">
        1 قسمة 2 يساوي 0 والباقي 1
        \nمصفوفة باقي القسمة [1,0,1,0,1,0,1]
        \nهذه المصفوفة تمثل العدد الثنائي المكافيء لشفرة آسكي
        \nملحوظة: نقوم بإضافة 0 للمصفوفة كحفظ خانة
    </string>

    //---------Visualisation Dialogs نصوص ال-----------//
    <string name="rounds">
        الجولة تمثل ترتيب الحرف في النص المدخل
    </string>
    <string name="text">
        هذا النص المدخل والذي نرغب في تطبيق خوارزمية محددة عليه
    </string>
    <string name="findingIndex">
        في هذه الخطوة نقوم بإيجاد ترتيب الحرف المحدد عن طريق البحث الخطي.
    </string>
    <string name="replacing">
        في هذه الخطوة نقوم بالبحث عن الحرف الذي يحمل نفس الترتيب ولكن في مصفوفة أبجدية عشوائية "غير مرتبة أبجديا"
    </string>
    <string name="result">
        هذه الخطوة الأخيرة حيث يتم تضمين الحرف المنتج والإحتفاظ به
    </string>

    <string name="n_equation">
        في هذه الخطوة نقوم بحساب قيمة ن وفقا للقانون :\n
        (ترتيب الحرف + المفتاح) % الحجم .\n
        % : تعني باقي القسمة .\n
        الحجم : هو حجم أو عدد العناصر داخل مصفوفة الأحرف الأبجدية ويساوي هنا 53 .
    </string>
    <string name="caesarReplacing">
       في هذه الخطوة نقوم بالبحث عن الحرف صاحب الترتيب الذي يساوي قيمة ن والتي تحصلنا عليها في الخطوة السابقة
    </string>
    <string name="mono_decryption_finding_index">
        في هذه الخطوة نقوم بإيجاد ترتيب الحرف المحدد في مصفوفة الحروف الأبجدية غير المرتبة عن طريق البحث الخطي .
    </string>
    <string name="mono_decryption_replacing">
        في هذه الخطوة نقوم بالبحث عن الحرف الذي يحمل نفس الترتيب في مصفوفة أبجدية مرتبة .
    </string>
    <string name="b2t_summation">
        في هذه الخطوة نقوم بجمع عناصر مصفوفة الأرقام العشرية لنحصل على شفرة آسكي .
    </string>
    <string name="b2t_toChar">
        في هذه الخطوة نقوم بتحويل شفرة آسكي إلى الحرف المكافيء لها .
    </string>
    <string name="t2b_toAscii">
        في هذه الخطوة نقوم بتحويل الحرف إلى قيمة آسكي المكافئة له .
    </string>
    <string name="alphabet">
        الأحرف الأبجدية
    </string>
    <string name="unsorted_alphabet">
        الأبجدية عشوائيا
    </string>

    //----------Binary to text Dialogs string------------//
    <string name="b2t_about">
        في هذه الخطوة نقوم بتحويل العدد الثنائي لعشري عن طريق القاعدة :\n
        الخانة الثنائية في محصلة (2 للقوة التي تساوي ترتيب الخانة) .\n
        *ملحوظة: الخانة الثنائية إما 1 وإما 0, وبالتالي في حالة الـ1 يكون الناتج هو قيمة المحصلة وفي حالة الـ0 يكون الناتج 0
    </string>
    <string name="b2t_index0">
        مثلا إذا أردنا تحويل العدد "10101010" لعدد عشري :\n
        نبدأ الترتيب من 0 إلى 7 بدلا من 1 إلى 8\n\n
        في حالة الخانة 0:\nنقوم بضرب 1 \"والذي يمثل القيمة في الخانة رقم 0\" في محصلة 2 مرفوعة للقوة 0\nيكون الناتج عندئذ يساوي 1\n
        مصفوفة الأرقام العشرية [1]
    </string>
    <string name="b2t_index1">
        في حالة الخانة 1:\nنقوم بضرب 0 في محصلة 2 مرفوعة للقوة 1, يكون الناتج 0\n
        مصفوفة الأرقام العشرية [1,0]
    </string>
    <string name="b2t_index2">
         في حالة الخانة 2:\n 1 في محصلة 2 مرفوعة للقوة 2, يكون الناتج 4\n
        مصفوفة الأرقام العشرية [1,0,4]
    </string>
    <string name="b2t_index3">
        في حالة الخانة 3:\n 0 في محصلة 2 مرفوعة للقوة 3, يكون الناتج 0\n
        مصفوفة الأرقام العشرية [1,0,4,0]
    </string>
    <string name="b2t_index4">
        في حالة الخانة 4:\n 1 في محصلة 2 مرفوعة للقوة 4, يكون الناتج 16\n
        مصفوفة الأرقام العشرية [1,0,4,0,16]
    </string>
    <string name="b2t_index5">
       في حالة الخانة 5:\n 0 في محصلة 2 مرفوعة للقوة 5, يكون الناتج 0\n
        مصفوفة الأرقام العشرية [1,0,4,0,16,0]
    </string>
    <string name="b2t_index6">
       في حالة الخانة 6:\n 1 في محصلة 2 مرفوعة للقوة 6, يكون الناتج 64\n
        مصفوفة الأرقام العشرية [1,0,4,0,16,0,64]
    </string>
    <string name="b2t_index7">
       في حالة الخانة 7:\n 0 في محصلة 2 مرفوعة للقوة 7, يكون الناتج 0\n
        مصفوفة الأرقام العشرية [1,0,4,0,16,0,64,0]\n
        حاصل جمع هذه المصفوفة يساوي 85 .\n
        *ملحوظة: تم تغيير لون الرقم 0 للون الأحمر لبيان أن ناتج العملية يساوي 0.
    </string>
    //---------------------------------------------------//
    //--------------------Explanation page---------------//

    <string name="caesar_exp">
        فكرة هذه الخوارزمية هي:\n
	- تفكيك النص لأحرف ومن ثم تطبيق الفكرة على كل الحروف على التوالي.\n
	- إيجاد الترتيب الأبجدي للحرف مثلا \'a\' ترتيبه 0, \'b\' ترتيبه 1 … إلخ.\n
	- نجمع هذا الرقم "رقم الترتيب" إلى قيمة المفتاح المدخلة بواسطة المستخدم.\n
	- نقسم ناتج عملية الجمع السابقة على حجم مصفوفة الأحرف الأبجدية.\n
	- حجم المصفوفة هو عدد العناصر داخل المصفوفة.\n
	- في حالتنا هنا يوجد لدينا 26 حرف صغير "small" و26 حرف كبير "Capital" بالإضافة للمسافة الفارغة "Space" وبالتالي يكون الحجم يساوي 53 عنصر.\n
	- بعد إجراء عملية القسمة نحصل على باقي قسمة يمثل الترتيب للحرف الجديد.\n
	- مثلا: الحرف \'e\' ترتيبه 4 والحرف \'E\' ترتيبه 30, فإذا كانت قيمة المفتاح فرضا تساوي 25 يكون:\n
	تشفير e هو (4 + 25)%53 = 29 % 53, ناتج القسمة 0 والباقي 29, 29 هو ترتيب الحرف \'D\'.\n
	تشفير E هو (30 + 25)%53 = 55 % 53, ناتج القسمة 1 والباقي 2, 2 هو ترتيب الحرف \'c\'.\n
	- نكرر العملية مع باقي الأحرف.\n
*ملحوظة: هذه العلامة \'~\' لتعويض المسافة الفارغة \' \'.\n
يمكنك الضغط على كل خطوة لمعرفة تفاصيلها\n
    </string>
    <string name="mono_exp">
        فكرة هذه الخوارزمية هي:\n
	- تفكيك النص لأحرف ومن ثم تطبيق الفكرة على الحروف على التوالي.\n
	- إيجاد الترتيب الأبجدي للحرف مثلا \'a\' ترتيبه 0, \'b\' ترتيبه 1 … إلخ.\n
	- البحث عن الحرف صاحب نفس الترتيب لكن في مصفوفة غير مرتبة.\n
	- عندها نحصل على الحرف جديد.\n
	- نكرر العملية مع باقي الأحرف.\n
    *ملحوظة: هذه العلامة \'~\' لتعويض المسافة الفارغة \' \'.\n
    يمكنك الضغط على كل خطوة لمعرفة تفاصيلها\n
    </string>
    <string name="caesar_exp_dec">
        فكرة هذه الخوارزمية هي:\n
	- تفكيك النص لأحرف ومن ثم تطبيق الفكرة على كل الحروف على التوالي.\n
	- إيجاد الترتيب الأبجدي للحرف مثلا \'a\' ترتيبه 0, \'b\' ترتيبه 1 … إلخ.\n
	- نحذف هذا الرقم "رقم الترتيب" من قيمة المفتاح المدخلة بواسطة المستخدم.\n
	- نقسم ناتج عملية الحذف السابقة على حجم مصفوفة الأحرف الأبجدية.\n
	- حجم المصفوفة هو عدد العناصر داخل المصفوفة.\n
	- في حالتنا هنا يوجد لدينا 26 حرف صغير "small" و26 حرف كبير "Capital" بالإضافة للمسافة الفارغة "Space" وبالتالي يكون الحجم يساوي 53 عنصر.\n
	- بعد إجراء عملية القسمة نحصل على باقي قسمة يمثل الترتيب للحرف الجديد.\n
	- مثلا: الحرف \'e\' ترتيبه 4 والحرف \'E\' ترتيبه 30, فإذا كانت قيمة المفتاح فرضا تساوي 25 يكون:\n
	تشفير e هو (4 - 25)%53 = -21 % 53, ناتج القسمة 0 والباقي 32, 32 هو ترتيب الحرف \'G\'.\n
	تشفير E هو (30 - 25)%53 = 5 % 53, ناتج القسمة 0 والباقي 5, 5 هو ترتيب الحرف \'f\'.\n
	- نكرر العملية مع باقي الأحرف.\n
*ملحوظة: هذه العلامة \'~\' لتعويض المسافة الفارغة \' \'.\n
يمكنك الضغط على كل خطوة لمعرفة تفاصيلها\n
    </string>
    <string name="mono_exp_dec">
        فكرة هذه الخوارزمية هي:\n
	- - تفكيك النص لأحرف ومن ثم تطبيق الفكرة على الحروف على التوالي.\n
	- إيجاد الترتيب الأبجدي للحرف في مصفوفة غير مرتبة مثلا \'a\' ترتيبه 18, \'b\' ترتيبه 48 … إلخ.\n
	- البحث عن الحرف صاحب نفس الترتيب لكن في مصفوفة مرتبة.\n
	- عندها نحصل على الحرف جديد.\n
	- نكرر العملية مع باقي الأحرف.\n
    *ملحوظة: هذه العلامة \'~\' لتعويض المسافة الفارغة \' \'.\n
    يمكنك الضغط على كل خطوة لمعرفة تفاصيلها\n
    </string>
    <string name="t2b_exp">
        فكرة هذه الخوارزمية هي:\n
	- كل حرف له شفرة رقمية خاصة تسمى شفرة آسكي.\n
	- نقوم بإيجاد قيمة شفرة آسكي للحرف \n
	- نقوم بتحويلها إلى رقم ثنائي.\n
	- للتحويل من عشري إلى ثنائي فإننا نقوم بقسمة الرقم العشري على 2 لنحصل على ناتج قسمة عشري جديد وباقي قسمة إما 0 أو 1\n
	- نقوم بإجراء القسمة على ناتج القسمة العشري ونحتفظ بباقي القسمة في مصفوفة \n
	- نكرر هذه العملية حتى يصبح ناتج القسمة 0.\n
	- عندها تكون مصفوفة باقي القسمة مكتملة ومكونة من أرقام ثنائية فقط تمثل الرقم الثنائي المكافيء لشفرة آسكي.\n
	- نكرر هذه العملية مع باقي الأحرف. \n
*ملحوظة : نقوم بإضافة 0 لآخر المصفوفة كحفظ خانة.\n
يمكنك الضغط على كل خطوة لمعرفة تفاصيلها\n
    </string>
    <string name="b2t_exp">
       فكرة هذه الخوارزمية هي:\n
	- كل 8 أرقام ثنائية تمثل حرف واحد.\n
	- بالتالي علينا أخذ 8 أرقام ثنائية كل مرة ونجري عليها ما يلي:\n
		- تحويل العدد الثنائي إلى عشري ويتم ذلك بضرب الخانة الثنائية في حاصل (2 مرفوعة للقوى ت).\n
		- ت = ترتيب الخانة الثنائية داخل الرقم الثنائي وتبدأ من 0 - 7 بدلا من 1 - 8.\n
		- بعد ذلك نحصل على أرقام عشرية نقوم بجمعها لنحصل على عدد عشري واحد يمثل قيمة آسكي لحرف محدد.\n
		- كل ما علينا فعله هو تحويل الشفرة للحرف المكافيء لها.\n
		- نكرر هذه العملية مع باقي الأحرف\n
ملحوظة:يمكنك الضغط على كل خطوة لمعرفة تفاصيلها\n
    </string>
    //---------------------------------------------------//

    <string name="info">معلومات</string>
    <string name="cipher">الشفرة</string>
    <string name="theme">الوضع</string>
    <string name="app">التطبيق</string>
    <string name="dev">المطور</string>
    <string name="name">الإسم</string>
    <string name="version">الإصدار</string>
    <string name="my_name">الزبيـر البشـرى</string>
    <string name="fmo">يمكنك متابعتي على:</string>
    <string name="linked_in">لينكدإن</string>
    <string name="facebook">فيسبوك</string>
    <string name="github">جِت</string>
    <string name="twitter">- تويتر -</string>
    <string name="x">إكس</string>
    <string name="support">إدعمني هنا إذا أردت:</string>
    <string name="bmc">أشتري لي جبنة</string>
    <string name="docs">التعليمات</string>
    <string name="index">الترتيب</string>
    <string name="ascii">آسكي</string>
    <string name="skip">تخطي</string>
    <string name="back">رجوع</string>
    <string name="mono">الخوارزمية الأبجدية الأحادية</string>
    <string name="caesar">خوارزمية قيصر</string>
    <string name="b2t">التحويل من ثنائي لنص</string>
    <string name="t2b">التحويل من نص لثنائي</string>
</resources>